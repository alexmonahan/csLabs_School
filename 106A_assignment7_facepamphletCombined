
/*
 /*
 * File: FacePamphletCanvas.java
 * -----------------------------
 * This class represents the canvas on which the profiles in the social
 * network are displayed.  NOTE: This class does NOT need to update the
 * display when the window is resized.
 */


import acm.graphics.*;
import java.awt.*;
import java.util.*;

public class FacePamphletCanvas extends GCanvas
                    implements FacePamphletConstants {

    //empty constructor
    public FacePamphletCanvas() {

    }

    /* Method: showMessage() */
    /**
     * Displays a message on the screen in a label.
     * @param msg The words we want to display.
     */
    public void showMessage(String msg) {
        GObject oldMessage = getElementAt((getWidth()/2),(getHeight() - 1.25 * BOTTOM_MESSAGE_MARGIN));
        if(oldMessage != null )remove(oldMessage);
        GLabel displayedMessage = new GLabel(msg, getWidth()/2, (getHeight() - BOTTOM_MESSAGE_MARGIN));
        displayedMessage.setFont(MESSAGE_FONT);
        displayedMessage.move((-1 * displayedMessage.getWidth() / 2), (-1 * displayedMessage.getAscent() / 2));
        add(displayedMessage);
    }


    /* Method: displayProfile() */
    /**
     * Clears the screen, and adds the given profile with its
     * image, status, and friend list.
     * @param profile The FacePamphletProfile profile we want to display.
     */
    public void displayProfile(FacePamphletProfile profile) {
        removeAll();
        displayedName = profile.getName();
        displayedImage = profile.getImage();
        displayedStatus = profile.getStatus();
        friendIterator = profile.getFriends();


        //add the name of the current profile
        GLabel nameLabel = new GLabel(displayedName);
        nameLabel.setFont(PROFILE_NAME_FONT);
        nameLabel.setColor(Color.BLUE);
        nameLabel.setLocation(LEFT_MARGIN, TOP_MARGIN + nameLabel.getAscent());
        add(nameLabel);


        //add the image and the image label of the current profile
        if(displayedImage != null){
            displayedImage.setSize(IMAGE_WIDTH, IMAGE_HEIGHT);
            add(displayedImage, LEFT_MARGIN, TOP_MARGIN + nameLabel.getAscent() + IMAGE_MARGIN);
        } else {
            GRect imageRect = new GRect(IMAGE_WIDTH, IMAGE_HEIGHT);
            add(imageRect, LEFT_MARGIN, TOP_MARGIN + nameLabel.getAscent() + IMAGE_MARGIN);
            GLabel noImageLabel = new GLabel("No Image.");
            noImageLabel.setFont(PROFILE_IMAGE_FONT);
            noImageLabel.setLocation(LEFT_MARGIN + IMAGE_WIDTH/2 - noImageLabel.getWidth()/2, TOP_MARGIN + 1.5*nameLabel.getAscent() + IMAGE_MARGIN + IMAGE_HEIGHT/2);
            add(noImageLabel);
        }

        //add the status label of the given user
        GLabel displayedStatusLabel;
        if(displayedStatus.equals("")){
            displayedStatusLabel = new GLabel("No current status.");
        } else {
            displayedStatusLabel = new GLabel(displayedName + " is " + displayedStatus);
        }
        displayedStatusLabel.setFont(PROFILE_STATUS_FONT);
        displayedStatusLabel.setLocation(LEFT_MARGIN, STATUS_MARGIN + displayedStatusLabel.getAscent() + TOP_MARGIN + nameLabel.getAscent() + IMAGE_MARGIN + IMAGE_HEIGHT);
        add(displayedStatusLabel);

        //add the "Friends" label to the top right
        GLabel friendsLabel = new GLabel("Friends");
        friendsLabel.setLocation(getWidth()/2, TOP_MARGIN + nameLabel.getAscent() + IMAGE_MARGIN);
        friendsLabel.setFont(PROFILE_FRIEND_LABEL_FONT);
        add(friendsLabel);

        //add all of the given friends under the "Friends" label created above
        int count = 1;
        while(friendIterator.hasNext()){
            String friendName = friendIterator.next();
            GLabel label_friends = new GLabel(friendName);
            label_friends.setFont(PROFILE_FRIEND_FONT);
            label_friends.setLocation(getWidth()/2, TOP_MARGIN + nameLabel.getAscent() + IMAGE_MARGIN + count * label_friends.getAscent());
            add(label_friends);
            count++;
        }
    }

    //instance variables
    private String displayedName = "";
    private GImage displayedImage = null;
    private String displayedStatus = "";
    private Iterator<String> friendIterator;
    private Iterator<String> groupIterator;
}


/*
* File: FacePamphlet.java
* -----------------------
* When it is finished, this program will implement a basic social network
* management system.
*/

import acm.program.*;
import acm.graphics.*;
import acm.util.*;
import java.awt.event.*;
import javax.swing.*;

//Note -- images got messed up -- must type "images/MehranS.jpg" or another
//image with this format for the image to load properly and not get a debug error!

public class FacePamphlet extends Program
                   implements FacePamphletConstants {
// Note -- images got messed up -- must type "images/MehranS.jpg" or another
//image with this format for the image to load properly and not get a debug error!

   //adds the canvas, JTextFields, and JButtons to the screen.
   //Adds Action Listeners
   public void init() {
       canvas = new FacePamphletCanvas();
       add(canvas);
       database = new FacePamphletDatabase();

       nameField = new JTextField(TEXT_FIELD_SIZE);
       statusField = new JTextField(TEXT_FIELD_SIZE);
       pictureField = new JTextField(TEXT_FIELD_SIZE);
       friendField = new JTextField(TEXT_FIELD_SIZE);

       add(new JLabel("Name "), NORTH);
       add(nameField, NORTH);
       add(new JButton("Add"), NORTH);
       add(new JButton("Delete"), NORTH);
       add(new JButton("Lookup"), NORTH);

       add(statusField, WEST);
       add(new JButton("Change Status"), WEST);
       add(new JLabel(EMPTY_LABEL_TEXT), WEST);
       add(pictureField, WEST);
       add(new JButton("Change Picture"), WEST);
       add(new JLabel(EMPTY_LABEL_TEXT), WEST);
       add(friendField, WEST);
       add(new JButton("Add Friend"), WEST);

       statusField.addActionListener(this);
       statusField.setActionCommand("Change Status");
       pictureField.addActionListener(this);
       pictureField.setActionCommand("Change Picture");
       friendField.addActionListener(this);
       friendField.setActionCommand("Add Friend");

       addActionListeners();
   }


  //Reacts properly when names, statuses, images, friends, etc. are changed in the program.
   public void actionPerformed(ActionEvent e) {
       if(e.getActionCommand().equalsIgnoreCase("Change Status")){
           changeStatus();
       } else if(e.getActionCommand().equalsIgnoreCase("Change Picture")){
           changePic();
       }else if(e.getActionCommand().equalsIgnoreCase("Add Friend")){
           addFriend();
       }else if(e.getActionCommand().equalsIgnoreCase("Add")){
           addProfile();
       }else if(e.getActionCommand().equalsIgnoreCase("Delete")){
           delete();
       }else if(e.getActionCommand().equalsIgnoreCase("LookUp")){
           lookUp();
       }
   }

   //Attempts to the add a friend the given profile with the typed in name.
   public void addFriend(){
       if(friendField.getText().equals("")){
       } else{
           if (!(currentProfile.equals(""))){
               FacePamphletProfile profile = database.getProfile(currentProfile);
               String friendName = friendField.getText();
               if(friendName.equals(currentProfile)){
                   canvas.showMessage("You cannot add yourself!");
               } else {
                   attemptToAddFriend(friendName, profile);
               }
           } else {
               canvas.showMessage("Please select a valid profile");
           }
       }
   }

   //Attempts to add the given parameter of a friendName. The parameter profile is
   //the current profile we are looking at.
   public void attemptToAddFriend(String friendName, FacePamphletProfile profile){
       if(database.containsProfile(friendName)){
           boolean p = profile.addFriend(friendName);
           if(!p){
               canvas.displayProfile(profile);
               canvas.showMessage("Already friends with " + friendName + "!");
           } else{
               FacePamphletProfile friendProfile = database.getProfile(friendName);
               friendProfile.addFriend(currentProfile);
               canvas.displayProfile(profile);
               canvas.showMessage("Now friends with " + friendName);
           }
       } else{
           canvas.displayProfile(profile);
           canvas.showMessage("Please select a valid profile to add friends to");
       }
   }


   //Adds a given profile to the screen, displays it along with a proper message,
   //and updates the database.
   public void addProfile(){
       if(nameField.getText().equals("")){
       } else{
           if(database.getProfile(nameField.getText()) == null){
               currentProfile = nameField.getText();
               FacePamphletProfile profile = new FacePamphletProfile(currentProfile);
               database.addProfile(profile);
               canvas.displayProfile(profile);
               canvas.showMessage(currentProfile + " created a profile!");
           } else{
               canvas.displayProfile(database.getProfile(nameField.getText()));
               canvas.showMessage(nameField.getText() + " already has a profile!");
           }
       }
   }

   //Deletes a given profile and changes the current profile name to "".
   //Clears the canvas and shows a proper message.
   public void delete(){
       if(nameField.getText().equals("")){
       } else{
           currentProfile = "";
           FacePamphletProfile profile = database.getProfile(nameField.getText());
           if(profile != null){
               canvas.removeAll();
               canvas.showMessage(nameField.getText() + " deleted. :( ");
               database.deleteProfile(nameField.getText());
           } else{
               canvas.removeAll();
               canvas.showMessage(nameField.getText() + " cannot be removed.");
           }
       }
   }

   //Changes the status of the current profile to the given text and displays the proper
   //message on the screen.
   public void changeStatus(){
       if(statusField.getText().equals("")){
       } else{
           if (!(currentProfile.equals(""))){
               FacePamphletProfile profile = database.getProfile(currentProfile);
               profile.setStatus(statusField.getText());
               canvas.displayProfile(profile);
               canvas.showMessage("Status of " + currentProfile + " changed to " + statusField.getText());
           } else{
               canvas.showMessage("Please select a profile to change the status of");
           }
       }
   }

   //Changes the image of the current profile to the given image name file if it exists
   //and displays the proper message on the screen.
   public void changePic(){
       if(pictureField.getText().equals("")){
       } else{
           if (!(currentProfile.equals(""))){
               FacePamphletProfile profile = database.getProfile(currentProfile);
               GImage image = null;
               try {
                   image = new GImage(pictureField.getText());
               } catch (ErrorException ex) {
                   canvas.showMessage("Please select a valid image file");
               }
               if(image != null){
                   profile.setImage(image);
                   canvas.displayProfile(profile);
                   canvas.showMessage("Looking good - profile pic changed.");
               }
           } else{
               canvas.showMessage("Please select a profile to change the image of");
           }
       }
   }

   //Looks up and displays the given profile if it exists and displays the proper
   //message on the screen.
   public void lookUp(){
       if(nameField.getText().equals("")){
       } else{
           currentProfile = nameField.getText();
           if(!(database.containsProfile(currentProfile))){
               currentProfile = "";
               canvas.removeAll();
               canvas.showMessage(currentProfile + " is not a valid entry.");
           } else{
               canvas.displayProfile(database.getProfile(nameField.getText()));
               canvas.showMessage("Here is " + currentProfile);
           }
       }
   }

   //instance variables
   private JTextField nameField;
   private JTextField statusField;
   private JTextField pictureField;
   private JTextField friendField;
   private FacePamphletCanvas canvas;
   private FacePamphletDatabase database;
   private String currentProfile = "";

}



/*
 * File: FacePamphletConstants.java
 * --------------------------------
 * This file declares several constants that are shared by the
 * different modules in the FacePamphlet application.  Any class
 * that implements this interface can use these constants.
 */

public interface FacePamphletConstants {

    /** The width of the application window */
    public static final int APPLICATION_WIDTH = 800;

    /** The height of the application window */
    public static final int APPLICATION_HEIGHT = 500;

    /** Number of characters for each of the text input fields */
    public static final int TEXT_FIELD_SIZE = 15;

    /** Text to be used to create an "empty" label to put space
     *  between interactors on EAST border of application.  Note this
     *  label is not actually the empty string, but rather a single space */
    public static final String EMPTY_LABEL_TEXT = " ";

    /** Name of font used to display the application message at the
     *  bottom of the display canvas */
    public static final String MESSAGE_FONT = "Dialog-18";

    /** Name of font used to display the name in a user's profile */
    public static final String PROFILE_NAME_FONT = "Dialog-24";

    /** Name of font used to display the text "No Image" in user
     *  profiles that do not contain an actual image */
    public static final String PROFILE_IMAGE_FONT = "Dialog-24";

    /** Name of font used to display the status in a user's profile */
    public static final String PROFILE_STATUS_FONT = "Dialog-16-bold";

    /** Name of font used to display the label "Friends" above the
     *  user's list of friends in a profile */
    public static final String PROFILE_FRIEND_LABEL_FONT = "Dialog-16-bold";

    /** Name of font used to display the names from the user's list
     *  of friends in a profile */
    public static final String PROFILE_FRIEND_FONT = "Dialog-16";

    /** The width (in pixels) that profile images should be displayed */
    public static final double IMAGE_WIDTH = 200;

    /** The height (in pixels) that profile images should be displayed */
    public static final double IMAGE_HEIGHT = 200;

    /** The number of pixels in the vertical margin between the bottom
     *  of the canvas display area and the baseline for the message
     *  text that appears near the bottom of the display */
    public static final double BOTTOM_MESSAGE_MARGIN = 20;

    /** The number of pixels in the hortizontal margin between the
     *  left side of the canvas display area and the Name, Image, and
     *  Status components that are display in the profile */
    public static final double LEFT_MARGIN = 20;

    /** The number of pixels in the vertical margin between the top
     *  of the canvas display area and the top (NOT the baseline) of
     *  the Name component that is displayed in the profile */
    public static final double TOP_MARGIN = 20;

    /** The number of pixels in the vertical margin between the
     *  baseline of the Name component and the top of the Image
     *  displayed in the profile */
    public static final double IMAGE_MARGIN = 20;

    /** The number of vertical pixels in the vertical margin between
     *  the bottom of the Image and the top of the Status component
     *  in the profile */
    public static final double STATUS_MARGIN = 20;

}



import java.util.*;

public class FacePamphletDatabase implements FacePamphletConstants {

   //constructor
   public FacePamphletDatabase() {
       myProfiles = new HashMap<String, FacePamphletProfile>();
   }

   /* Method: addProfile() */
   /**
    * Adds the profile to the database.
    * @param profile The profile we are adding to the database.
    */
   public void addProfile(FacePamphletProfile profile) {
       String profileName = profile.getName();
       if(myProfiles.containsKey(profileName)) myProfiles.remove(profileName);
       myProfiles.put(profileName, profile);
   }

   /* Method: getProfile() */
   /**
    * Looks for a profile by name.
    * @param name The String for the profile we are looking up.
    * @return The FacePamphletProfile for the given name, if it exists.
    */
   public FacePamphletProfile getProfile(String name) {
       if(!myProfiles.containsKey(name)) return null;
       return myProfiles.get(name);
   }

   /* Method: deleteProfile() */
   /**
    * Deletes a profile from the database, if it exists. Must also
    * delete this profile from the list of friends.
    * @param name The String for the profile we are deleting.
    */
   public void deleteProfile(String name) {
       if(myProfiles.containsKey(name)){
           FacePamphletProfile deleteThisProfile = myProfiles.get(name);
           removeFriends(name, deleteThisProfile);
           myProfiles.remove(name);
       }
   }

   /* Method: removeFriends() */
   /**
    * Removes the deleted profile from the friend list.
    * @param deletingName The name of the profile we are deleting.
    * @param profile The profile we are deleting.
    */
   private void removeFriends(String deletingName, FacePamphletProfile profile){
       Iterator<String> friendDeleter = profile.getFriends();
       while(friendDeleter.hasNext()){
           FacePamphletProfile friend = myProfiles.get(friendDeleter.next());
           friend.removeFriend(deletingName);
       }
   }

   /* Method: containsProfile() */
   /**
    * Checks if a profile is in the database.
    * @param name The String for the profile we are looking up.
    * @return Whether or not the profile exists in the form of a boolean.
    */
   public boolean containsProfile(String name) {
       if(myProfiles.containsKey(name)) return true;
       return false;
   }

   //HashMap instance variable
   private HashMap<String, FacePamphletProfile> myProfiles;
}

import acm.graphics.*;
import java.util.*;
public class FacePamphletProfile implements FacePamphletConstants {

//constructor of FacePamphletProfile
public FacePamphletProfile(String name) {
    myName = name;
}

/* Method: getName() */
/**
 * Returns the name for the profile
 * @return the name for the profile
 */
public String getName() {
    return myName;
}

/* Method: getImage() */
/**
 * Returns the image for the profile
 * @return the image for the profile
 */
public GImage getImage() {
    return profPic;
}

/* Method: setImage() */
/**
 * Sets the image to a new picture.
 * @param The new image to change the picture to.
 */
public void setImage(GImage image) {
    profPic = image;
}

/* Method: getStatus() */
/**
 * Returns the status for the profile
 * @return the status for the profile
 */
public String getStatus() {
    return myStatus;
}

/* Method: setStatus() */
/**
 * Sets the status to a new line.
 * @param The new line to change the status to.
 */
public void setStatus(String status) {
    myStatus = status;
}


/* Method: addFriend() */
/**
 * Adds the given name to the list of friends if it is not already there.
 * @param friend The name of the person to try to add to the friend list.
 * @return A boolean true or false whether the friend was already in the list,
 * with false implying the list already has the friend.
 */
public boolean addFriend(String friend) {
    if (friendList.contains(friend)) return false;
    friendList.add(friend);
    return true;
}

/* Method: removeFriend() */
/**
 * Removes the given name to the list of friends if it is present in the friend list.
 * @param friend The name of the person to try to remove from the friend list.
 * @return A boolean true or false whether the friend was already is in the list,
 * with true implying the list has the friend.
 */
public boolean removeFriend(String friend) {
    if (!friendList.contains(friend))return false;
    friendList.remove(friend);
    return true;
}

/* Method: getFriends() */
/**
 * Finds a list of friends for the user.
 * @return A string iterator over the list of friends.
 */
public Iterator<String> getFriends() {
    return friendList.iterator();
}

/* Method: toString() */
/**
 * Finds the person's name, friends, and status.
 * @return A string containing the information for a profile in an easy-to-read format.
 */
public String toString() {
    String toString = "";
    toString += myName;
    toString += " (" + myStatus + "): ";
    for(int i = 0; i < friendList.size(); i++){
        toString += friendList.get(i);
        if (i != (friendList.size() - 1)) toString += ", ";
    }
    return toString;
}

public void setImageName(String imageName) {
    profPicName = imageName;
}

public String getImageName(){
    return profPicName;
}

//instance variables
private String myName;
private String profPicName = "";
private GImage profPic = null;
private String myStatus = "";
private ArrayList<String> friendList = new ArrayList<String>();

}
